cat [] ys = ys
cat (x:xs) ys = x : cat xs ys
rev = revinto []
revinto xs [] = xs
revinto xs (y:ys) = revinto (y:xs) ys
nil = kindof []
kindof x = x
odds [] = nil
odds (x:xs) = x:evens xs
evens [] = nil
evens (x:xs) = odds xs
zero = kindof []
inc n = kindof []:n
one = inc zero
two = inc one
add = cat
mul m [] = zero
mul m (s:n) = add m (mul m n)
six = add two (add two two)
big = mul (mul (mul six six) (mul six six)) (mul (mul six six) (mul six six))
iter f x = x:iter f (f x)
nats = iter inc zero
